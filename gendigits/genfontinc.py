#!/usr/bin/env python3

# This Python script grabs a font file, then for each digit it'll draw that on a canvas.
# It'll then grab the pixels of that canvas and encode them as a bitstream. That stream
# then gets compressed by counting the pixels between a black->white or white->black
# changeover. That then gets output as bytes: if the byte is smaller than 0xf0, it gets
# output. If the byte is larger, output 0xF0 plus the 4 LSB of the value and shift the
# value to the right by 4. Repeat until the value is less than 0xf0, at which point
# output it and grab the next byte.

# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# Jeroen Domburg <jeroen@spritesmods.com> wrote this file. As long as you retain 
# this notice you can do whatever you want with this stuff. If we meet some day, 
# and you think this stuff is worth it, you can buy me a beer in return. 
# ----------------------------------------------------------------------------

from PIL import Image
from PIL import ImageFont, ImageDraw, ImageShow

#This emits a digit and makes sure the line wraps after 16 emitted digits
#also keeps track of byte use
chars_in_line=0
total_bytes=0
def emit(n):
	global chars_in_line
	global total_bytes
	total_bytes+=1
	print(f"{n},", end="")
	chars_in_line+=1
	#need to wrap?
	if chars_in_line==16:
		chars_in_line=0
		print("\n\t", end="")

#Recursive function that prints a run in one byte or, if needed, multiple bytes.
def print_run(run):
	if (run<0xf0):
		emit(run)
	else:
		low=(run&0xf)+0xf0
		high=(run>>4)
		emit(low)
		print_run(high)


#Gets a bitstream list and RLE encodes it.
def do_rle(p):
	cur=p[0];
	run=0;
	for v in p:
		if v==cur:
			run=run+1
		else:
			cur=v;
			print_run(run)
			run=1
	#finish to end of picture
	print_run(run)

#EPD dimensions
scr_w=240
scr_h=416

ImageShow.register(ImageShow.DisplayViewer(), 0)

#Font for main digits
font = ImageFont.truetype("fonts/Catbrother.ttf", 540)
#Font for error messages
font2 = ImageFont.truetype("fonts/Catbrother.ttf", 20)

print("#include \"font_digits.h\"")
print("//Generated by genfontinc.py");
for i in range(0, 12):
	im = Image.new("1", (scr_w, scr_h), color=1)
	draw = ImageDraw.Draw(im)
	if i<10:
		draw.text((scr_w/2,scr_h/2+30), str(i), anchor="mm", font=font);
	elif i==10:
		draw.text((scr_w/2,scr_h/2+30), 'bat', anchor="mm", font=font2);
	elif i==11:
		draw.text((scr_w/2,scr_h/2+30), 'rtc', anchor="mm", font=font2);
	im.save(f"out{i}.png", "PNG")
	
	pix=[];
	for y in range(0, scr_h-1):
		for x in range(0, scr_w):
			pix.append(im.getpixel((x,y)))
	
	print(f"static const uint8_t font_digit_{i}[]={{\n\t", end="")
	do_rle(pix)
	print("")
	print("};")

print("\n")
print("const uint8_t *font_digits[]={")
for i in range(0, 12):
	print(f"\tfont_digit_{i},")
print("};")
print(f"//Total bytes: {total_bytes}")
